import React from "react";
import "./FAQ.css";
const FAQ = () => {
  return (
    <div>
      <div className="faq">
        <h2>রিয়াক্ট কিভাবে কাজ করে?</h2>
        <p>
          React হল JavaScript এর একটি লাইব্রেরী। আমরা জানি, একটা ওয়েব পেইজ
          ডিজাইন করতে হলে প্রথমেই লাগে HTML এবং বিভিন্ন HTML File এর সমন্বয়ে
          গঠিত হয় একটি Website, যেখানে প্রতিটি HTML File একটি আরেকটির সাথে Link
          করে রাখা হয়, এভাবেই Website গঠিত হয় বা কাজ করে থাকে।কিন্তু এভাবে
          Linking করে এক পেইজ থেকে আরেক পেইজ এ যেতে প্রতিবার পেইজ টি রিলোড হয়,
          যেটা User Experience কে ক্ষুণ্ণ করে। কিভাবে এই সমস্যাটি কে উন্নত করা
          যাই তার গবেষণার ফসল হল এই React.
        </p>
        <p>
          React এর মধ্যে আছে JSX (JavaScript XML) যেটা দেখতে অনেকটাই HTML এর মত
          কিন্তু সেগুলো কে HTML ফাইলে না লিখে .JS ফাইলর মধ্যে লেখা হয়।
          JavaScript যেহেতু একটা স্ক্রিপ্টিং ল্যাঙ্গুয়েজ এবং ব্রাওজারে কাজ করে
          তাই এটার মধ্যে যখন JSX এর মাধ্যমে HTML কোড গুলো লেখা হয় তখন User যদি
          এক পেইজ থেকে অন্য পেইজে যেতে চাই তখন সম্পূর্ণ পেইজ টি রিলোড না হয়ে
          শুধুমাত্র তার কাঙ্ক্ষিত Data টি Same পেইজের মধ্যে কোন প্রকার লোড না
          নিয়েই দেখাতে পারে। এভাবে একই পেইজের মধ্যে ডাটার পরিবরন কে বলা হয়
          Stage. যখনই User ভিন্ন কোথাও যেতে চাই বা দেখতে চাই তখন এই Stage
          পরিবর্তন করে তাকে তার Data দেখানো হয়।{" "}
        </p>
        <p>
          এছাড়া এই JSX এর মাধ্যমে আমরা নিজেদের মত করে Custom কম্পোনেন্ট বা সহজে
          বলতে গেলে HTML tag এর মত Custom tag তৈরি করতে পারি, সেটার মধ্যে
          Dynamic ভাবে Data পাঠিয়ে দেখাতে পারি, এছাড়া মজার বিষয় হলঃ আমরা এই
          কম্পোনেন্ট কে পুনারায় ব্যবহার করতে পারি। যেমনঃ একটি ওয়েবসাইটের প্রতিটি
          পেইজে যদি তার হেডার ও ফুটার দেখানোর প্রয়োজন পড়ে সেক্ষেত্রে সাধারণত
          আমাদের প্রয়োজন হয় প্রতিটা পেইজে আলাদা করে হেডার ও ফুটার এর জন্য কোড
          লেখা, কিন্তু React এর JSX এর মাধ্যমে কাস্টম কম্পনেট এর মাধ্যমে একবার
          হেডার ও ফুটারের জন্য কোড লিখে উক্ত কম্পোনেন্ট কে অন্য পেইজ বা File এ
          import করে দিলে হয়ে যাই এটার ফলে ডেভেলপারদের কষ্ট যেমন কমে যাই তেমনিই
          ভাবে কোডের Reuseablity বেড়ে যাই, যেটা সর্বদিক থেকেই খুবিই সুন্দর একটা
          পারফারমেন্স প্রদান করে।{" "}
        </p>
      </div>
      <div className="faq">
        <h2>Props ও State এর মধ্যে পার্থক্য কি?</h2>
        <p>
          Props ও State কে রিয়াক্ট এর খুবিই গুরুত্বপূর্ণ দুটি উপাদান বলা যাই।
          JSX এর মাধ্যমে তৈরিকৃত কম্পোনেন্টে ডাটা প্রেরণ করা ও User এর কাজের উপর
          নির্ভর করে Data পরিবর্তন করে দেখানো ক্ষেত্রে এ দুটির জুড়ি নাই! বিষয়
          দুটি আপাত দৃষ্টিতে দেখতে একই রকম দেখালেও এদের কাজের মধ্যে আছে অনেক
          তফাৎ। নিন্মে ছকের মাধ্যমে এ দুইয়ের পার্থক্য দেখানো হলঃ{" "}
        </p>
        <table>
          <tr>
            <th>Props</th>
            <th>State</th>
          </tr>
          <tr>
            <td>Props হল read only অর্থাৎ ডাটা পেলে সেটিকে ব্যবহার করা যাবে কিন্তু পরিবর্তন করা যাবে না। </td>
            <td>State এর ডাটা পরিবর্তন যোগ্য।</td>
          </tr>
          <tr>
            <td>Props হয় immutable বা অপরিবর্তনীয়। </td>
            <td>State হল mutable বা পরিবর্তনযোগ্য। </td>
          </tr>
          <tr>
            <td>Props কে তার child component access করতে পারে।</td>
            <td>State কে তার child component access করতে পারে না। </td>
          </tr>
          <tr>
            <td>এটি components কে reusable (পুনারায় ব্যবহার) করতে পারে। </td>
            <td>এটি components কে reusable (পুনারায় ব্যবহার) করতে পারে না।</td>
          </tr>
          <tr>
            <td>Stateless component এ Props থাকতে পারে। </td>
            <td>Stateless component এ Props থাকতে পারে না। </td>
          </tr>
        </table>
        <p>উপরিক্ত আলোচনার মাধ্যমে আমরা Props ও State সম্পর্কে সাধারণ কিছু তথ্য ও এদের মধ্যে পার্থক্য সম্পর্কে জানতে পারলাম, এগুলো নিয়ে কাজ করার সময় আমাদের উক্ত বিষয়গুলি খেয়াল রেখেই সঠিকভাবে ব্যবহার করতে হবে নতুবা, কাঙ্ক্ষিত ফলাফল না পাওয়া ছাড়াও বিভিন্ন সমস্যার সম্মুখীন হতে হবে। </p>
      </div>
    </div>
  );
};

export default FAQ;
